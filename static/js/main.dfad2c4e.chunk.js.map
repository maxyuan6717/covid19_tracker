{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","undefined","confirmed","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","url2","fetchData","country","a","changeableUrl","axios","get","APIdata","len","length","date","modifiedData","Confirmed","Recovered","Deaths","Global","TotalConfirmed","TotalRecovered","TotalDeaths","console","log","fetchDailyData","APIurl","map","dailyData","substring","total","reportDate","fetchCountries","Country","Slug","sort","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","value","i","key","App","state","fetchedData","setState","document","title","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dfad2c4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\n//const Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }}) => {\nconst Cards = ({data}) => {\n    if (data === undefined || data.confirmed === undefined) {\n        return 'Loading... ';\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={data.confirmed} duration = {2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of total cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={data.recovered} duration = {2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={data.deaths} duration = {2.5} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(data.lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\nconst url2 = 'https://api.covid19api.com';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = `${url2}/summary`;\n    if (country) {\n        changeableUrl = `${url2}/total/dayone/country/${country}`;\n    }\n    try {\n        const APIdata = await axios.get(changeableUrl);\n        const len = APIdata.data.length;\n        if (len === 0) {\n            const date = await axios.get(`${url2}/summary`);\n            return {confirmed: 0, recovered: 0, deaths: 0, lastUpdate: date.data.Date}\n        }    \n        let modifiedData;\n\n        if (country) {\n            modifiedData = {\n                confirmed: APIdata.data[len-1].Confirmed,\n                recovered: APIdata.data[len-1].Recovered,\n                deaths: APIdata.data[len-1].Deaths,\n                lastUpdate: APIdata.data[len-1].Date,\n            }\n        }\n        else {\n            modifiedData = {\n                confirmed: APIdata.data.Global.TotalConfirmed,\n                recovered: APIdata.data.Global.TotalRecovered,\n                deaths: APIdata.data.Global.TotalDeaths,\n                lastUpdate: APIdata.data.Date,\n            }\n            //console.log(modifiedData.lastUpdate);\n        }\n\n        return modifiedData;\n    } catch(error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData =  async (country)=> {\n    try {\n        if (country) {\n            const APIurl = `${url2}/total/dayone/country/${country}`;\n            const APIdata = await axios.get(APIurl);\n            //const len = APIdata.data.length;\n            //console.log(country);\n\n            const modifiedData = APIdata.data.map((dailyData)=>({\n                confirmed: dailyData.Confirmed,\n                deaths: dailyData.Deaths,\n                recovered: dailyData.Recovered,\n                date: dailyData.Date.substring(0,10),\n            }));\n\n            return modifiedData\n        }\n        else {\n            ///*\n            const { data } = await axios.get(`${url}/daily`);\n\n            const modifiedData = data.map((dailyData)=>({\n                confirmed: dailyData.confirmed.total,\n                deaths: dailyData.deaths.total,\n                date: dailyData.reportDate,\n            }));\n            return modifiedData;\n            //*/\n            /*\n            let modifiedData = getData();\n            const APIurl = `${url2}/summary`;\n            const APIdata = await axios.get(APIurl);\n            const curDate = APIdata.data.Date.substring(0,10);\n            const len = modifiedData.length;\n            if (curDate === modifiedData[len-1].date) return modifiedData;\n            console.log(curDate);\n            const dailyData = {\n                confirmed: modifiedData[len-1].confirmed + APIdata.data.Global.NewConfirmed,\n                recovered: modifiedData[len-1].recovered + APIdata.data.Global.NewRecovered,\n                deaths: modifiedData[len-1].deaths + APIdata.data.Global.NewDeaths,\n                date: curDate,\n            }\n            modifiedData.push(dailyData);\n            localStorage.setItem('modifiedData',JSON.stringify(modifiedData));\n            return modifiedData;\n            */\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction getData() {\n    var modifiedData = localStorage.getItem('modifiedData');\n    if (modifiedData === null) {\n        return null;\n    }\n    else {\n        return JSON.parse(modifiedData);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const APIdata = await axios.get(`${url2}/countries`);\n        //console.log(APIdata.data.map((country) => [country.Country, country.Slug]));\n\n        return APIdata.data.map((country) => [country.Country, country.Slug]).sort();\n        //const { data: { countries}} = await axios.get(`${url}/countries`);\n        //return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\n//const Chart = ( {data: { confirmed, deaths, recovered}, country}) => {\nconst Chart = ( {data,country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData(country));\n        }\n\n        fetchAPI();\n    }, [country]);\n\n    if (data === undefined) {\n        return 'Loading... ';\n    }\n\n    const lineChart = (\n        !(dailyData === undefined)\n            ? (\n            <Line \n            data = {{\n                labels: dailyData.map(({ date})=> date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed}) => confirmed),\n                    label: 'Infected',\n                    borderColor: 'blue',\n                    //backgroundColor: 'rgba(0,0,255,0.3)',\n                    fill: true,\n                },{\n                    data: dailyData.map(({recovered})=> recovered),\n                    label: 'Recovered',\n                    borderColor: 'green',\n                    //backgroundColor: 'rgba(0,255,0,0.3)',\n                    fill: true,\n                },{\n                    data: dailyData.map(({ deaths}) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.3)',\n                    fill: true,\n                }],\n            }}\n            />) : null\n    );\n    /*\n    const barChart = (\n        data.confirmed\n            ? (\n                <Bar \n                    data={{\n                        labels: ['Infected','Recovered','Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: [\n                                'rgba(0,0,255,0.5)',\n                                'rgba(0,255,0,0.5)',\n                                'rgba(255,0,0,0.5)',\n                            ],\n                            data: [data.confirmed, data.recovered, data.deaths]\n                        }]\n                    }}\n                    options={{\n                        legend: {display : false},\n                        title: {display: true, text: `Current state in ${country}`},\n                    }}\n                />\n            ) : null\n    )\n    */\n    return (\n        <div className={styles.container}>\n            {lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ( {handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(event) => handleCountryChange(event.target.value)}>\n                <option value=\"global\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country[1]}>{country[0]}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\n\nimport {Cards,Chart,CountryPicker} from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        document.title = 'COVID-19 Tracker';\n        this.setState({data: fetchedData});\n    }\n\n    handleCountryChange = async(country) => {\n        if (country === 'global') country = null;\n        const fetchedData = await fetchData(country);\n        \n        this.setState({data: fetchedData, country: country});\n    }\n\n    render() {\n        const {data, country} = this.state;\n        if (data === undefined) return null;\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src = {coronaImage} alt = \"COVID-19\"/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Cards data = {data} />\n                <Chart data = {data} country = {country} />\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\",\"contaienr\":\"App_contaienr__1sLr7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}